test <- afm_img(half_um_scan, "Height_Sensor_matrix", color = "nanoscope")
display(test, method = "raster")
half_um_scan %>%
afm_rayshade(texture = "bw") %>%
afm_overlay(half_um_scan, "DMTModulus_matrix", color = "distinct_rainbow", alpha = 0.5) %>%
afm_plot_3d(half_um_scan)
afm_rayshade <- function(data = NULL, matrix = "Height_Sensor_matrix", texture = "desert", light_angle = 315, zscale = "auto", max_darken = 0.7) {
if(is.null(data)) {stop("data argument must be specified")}
if(class(data) != "afm_scan") {stop("class of data must be 'afm_scan'")}
if(!(matrix %in% names(data[["maps"]]))) {stop("matrix not found in data, check your spelling")}
if(is.numeric(zscale)) {
z <- zscale
} else if(zscale == "auto") {
zscale <- (data[["params"]][["afm_lines"]])/(data[["params"]][["scan_size"]])
}
elmat <- data[["maps"]][[matrix]]
elmat %>%
rayshader::sphere_shade(texture = texture) %>%
rayshader::add_shadow(rayshader::ray_shade(elmat, zscale = zscale, maxsearch = 100, sunangle = light_angle), max_darken = max_darken) %>%
rayshader::add_shadow(rayshader::ambient_shade(elmat, zscale = zscale, maxsearch = 20), max_darken = max_darken)
}
afm_overlay <- function(hillshade = NULL, data = NULL, matrix = NULL, color = "smooth_rainbow", alpha = 0.7) {
if(is.null(data)) {stop("data argument must be specified")}
if(is.null(hillshade)) {stop("hillshade must be passed to afm_overlay")}
if(is.null(matrix)) {stop("must specify a matrix to overlay")}
if(class(data) != "afm_scan") {stop("class of data must be 'afm_scan'")}
if(!(matrix %in% names(data[["maps"]]))) {stop("matrix not found in data, check your spelling")}
if(!is.numeric(alpha)) {stop("alpha must be numeric between 0 and 0.99")}
if(alpha < 0 | alpha > 0.99) {stop("alpha must be numeric between 0 and 0.99")}
overlay <- afm_img(data = data, matrix = matrix, color = color, normalized = TRUE) %>%
EBImage::rotate(90)
EBImage::writeImage(overlay, files = "overlay_tmp.png", type = "png")
overlay_png <- png::readPNG("overlay_tmp.png")
file.remove("overlay_tmp.png")
alpha_layer <- matrix(1, nrow = dim(overlay_png)[1], ncol = dim(overlay_png)[2])
overlay_png <- abind::abind(overlay_png, alpha_layer)
overlay_png[,,4] <- alpha
hillshade %>%
rayshader::add_overlay(overlay_png)
}
afm_plot_3d <- function(hillshade = NULL, data = NULL, matrix = "Height_Sensor_matrix", zscale = "auto", ...) {
if(is.null(hillshade)) {stop("hillshade must be passed to afm_plot_3d")}
if(any(hillshade > 1 || hillshade < 0)) {stop("Argument `hillshade` must not contain any entries less than 0 or more than 1")}
if(is.null(data)) {stop("data argument must be specified")}
if(class(data) != "afm_scan") {stop("class of data must be 'afm_scan'")}
if(!(matrix %in% names(data[["maps"]]))) {stop("matrix not found in data, check your spelling")}
if(is.numeric(zscale)) {
z <- zscale
} else if(zscale == "auto") {
zscale <- (data[["params"]][["afm_lines"]])/(data[["params"]][["scan_size"]])
}
elmat <- data[["maps"]][[matrix]]
hillshade %>%
rayshader::plot_3d(elmat, zscale = zscale, ...)
}
half_um_scan %>%
afm_rayshade(texture = "bw") %>%
afm_overlay(half_um_scan, "DMTModulus_matrix", color = "distinct_rainbow", alpha = 0.5) %>%
afm_plot_3d(half_um_scan)
devtools::install_github("tylermorganwall/rayshader")
afm_img <- function(data = NULL, matrix = NULL, color = "grey", normalized = TRUE) {
if(is.null(data)) {stop("data argument must be specified")}
if(class(data) != "afm_scan") {stop("class of data must be 'afm_scan'")}
if(!(matrix %in% names(data[["maps"]]))) {stop("matrix not found in data, check your spelling")}
nanoscope_colors <- c("#000000", "#000000", "#0A0000", "#140000", "#1E0000", "#280000", "#320000", "#3C0000", "#460000", "#500000", "#5A0400", "#641500", "#6E2300", "#783400", "#824300", "#8C5100", "#966100", "#A07102", "#AA801B", "#B49037", "#BE9F52", "#C8AD6C", "#D2BD87", "#DCCCA3", "#E6DCBF", "#F0ECDB", "#FAFAF5", "#FFFFFF", "#FFFFFF")
nanoscope_pal <- colorRampPalette(nanoscope_colors)
pal <- switch(
color,
"grey" = grey.colors(256, start = 0, end = 1, gamma = 1),
"nanoscope" = nanoscope_pal(256),
"distinct_rainbow" = rainbow(10),
"smooth_rainbow" = rainbow(256),
"viridis" = viridis::viridis(256),
"magma" = viridis::magma(256),
"plasma" = viridis::plasma(256),
"inferno" = viridis::inferno(256)
)
my_dat <- data[["maps"]][[matrix]]
if(normalized == TRUE) {
normalized <- EBImage::normalize(my_dat, 1)
img <- EBImage::Image(normalized)
} else {
img <- EBImage::Image(my_dat)
}
img_rot <- EBImage::rotate(img, -90)
img_col <- EBImage::colormap(img_rot, pal)
}
afm_rayshade <- function(data = NULL, matrix = "Height_Sensor_matrix", texture = "desert", light_angle = 315, zscale = "auto", max_darken = 0.7) {
if(is.null(data)) {stop("data argument must be specified")}
if(class(data) != "afm_scan") {stop("class of data must be 'afm_scan'")}
if(!(matrix %in% names(data[["maps"]]))) {stop("matrix not found in data, check your spelling")}
if(is.numeric(zscale)) {
z <- zscale
} else if(zscale == "auto") {
zscale <- (data[["params"]][["afm_lines"]])/(data[["params"]][["scan_size"]])
}
elmat <- data[["maps"]][[matrix]]
elmat %>%
rayshader::sphere_shade(texture = texture) %>%
rayshader::add_shadow(rayshader::ray_shade(elmat, zscale = zscale, maxsearch = 100, sunangle = light_angle), max_darken = max_darken) %>%
rayshader::add_shadow(rayshader::ambient_shade(elmat, zscale = zscale, maxsearch = 20), max_darken = max_darken)
}
afm_overlay <- function(hillshade = NULL, data = NULL, matrix = NULL, color = "smooth_rainbow", alpha = 0.7) {
if(is.null(data)) {stop("data argument must be specified")}
if(is.null(hillshade)) {stop("hillshade must be passed to afm_overlay")}
if(is.null(matrix)) {stop("must specify a matrix to overlay")}
if(class(data) != "afm_scan") {stop("class of data must be 'afm_scan'")}
if(!(matrix %in% names(data[["maps"]]))) {stop("matrix not found in data, check your spelling")}
if(!is.numeric(alpha)) {stop("alpha must be numeric between 0 and 0.99")}
if(alpha < 0 | alpha > 0.99) {stop("alpha must be numeric between 0 and 0.99")}
overlay <- afm_img(data = data, matrix = matrix, color = color, normalized = TRUE) %>%
EBImage::rotate(90)
EBImage::writeImage(overlay, files = "overlay_tmp.png", type = "png")
overlay_png <- png::readPNG("overlay_tmp.png")
file.remove("overlay_tmp.png")
alpha_layer <- matrix(1, nrow = dim(overlay_png)[1], ncol = dim(overlay_png)[2])
overlay_png <- abind::abind(overlay_png, alpha_layer)
overlay_png[,,4] <- alpha
hillshade %>%
rayshader::add_overlay(overlay_png)
}
afm_plot_3d <- function(hillshade = NULL, data = NULL, matrix = "Height_Sensor_matrix", zscale = "auto", ...) {
if(is.null(hillshade)) {stop("hillshade must be passed to afm_plot_3d")}
if(any(hillshade > 1 || hillshade < 0)) {stop("Argument `hillshade` must not contain any entries less than 0 or more than 1")}
if(is.null(data)) {stop("data argument must be specified")}
if(class(data) != "afm_scan") {stop("class of data must be 'afm_scan'")}
if(!(matrix %in% names(data[["maps"]]))) {stop("matrix not found in data, check your spelling")}
if(is.numeric(zscale)) {
z <- zscale
} else if(zscale == "auto") {
zscale <- (data[["params"]][["afm_lines"]])/(data[["params"]][["scan_size"]])
}
elmat <- data[["maps"]][[matrix]]
hillshade %>%
rayshader::plot_3d(elmat, zscale = zscale, ...)
}
load("data/half_um_scan.rda")
library(rayshader)
half_um_scan %>%
afm_rayshade(texture = "bw") %>%
afm_overlay(half_um_scan, "DMTModulus_matrix", color = "distinct_rainbow", alpha = 0.5) %>%
afm_plot_3d(half_um_scan)
half_um_scan %>%
afm_rayshade(texture = "bw") %>%
afm_overlay(half_um_scan, "DMTModulus_matrix", color = "distinct_rainbow", alpha = 0.2) %>%
afm_plot_3d(half_um_scan)
half_um_scan %>%
afm_rayshade(texture = "bw") %>%
afm_overlay(half_um_scan, "DMTModulus_matrix", color = "distinct_rainbow", alpha = 0.5) %>%
afm_plot_3d(half_um_scan)
elmat <- half_um_scan$maps$Height_Sensor_matrix
render_label(elmat,x=350,y=240, z=600, zscale=1,
text = "A point", textsize = 2, linewidth = 5)
my_elmat <- half_um_scan$maps$Height_Sensor_matrix
render_label(my_elmat,x=350,y=240, z=600, zscale=1,
text = "A point", textsize = 2, linewidth = 5)
elmat <- half_um_scan$maps$Height_Sensor_matrix
threed<- elmat %>%
sphere_shade(texture = "desert") %>%
add_shadow(ray_shade(elmat,zscale=1,maxsearch = 100),0.7) %>%
add_shadow(ambient_shade(elmat, zscale = 1),0.7) %>%
plot_3d(elmat, zscale = 1)
render_label(elmat,x=350,y=240, z=600, zscale=50,
text = "A point", textsize = 2, linewidth = 5)
half_um_scan %>%
afm_rayshade(texture = "bw") %>%
afm_overlay(half_um_scan, "DMTModulus_matrix", color = "distinct_rainbow", alpha = 0.5) %>%
afm_plot_3d(half_um_scan)
render_label(elmat,x=350,y=240, z=600, zscale=50,
text = "A point", textsize = 2, linewidth = 5)
render_label(elmat,x=350,y=240, z=100, zscale=1,
text = "A point", textsize = 2, linewidth = 5)
half_um_scan %>%
afm_rayshade(texture = "bw") %>%
afm_overlay(half_um_scan, "DMTModulus_matrix", color = "distinct_rainbow", alpha = 0.5) %>%
afm_plot_3d(half_um_scan)
render_label(elmat,x=350,y=240, z=100, zscale=1,
text = "A point", textsize = 2, linewidth = 5)
half_um_scan %>%
afm_rayshade(texture = "bw") %>%
afm_overlay(half_um_scan, "DMTModulus_matrix", color = "distinct_rainbow", alpha = 0.5) %>%
afm_plot_3d(half_um_scan)
render_label(elmat,x=350,y=240, z=100, zscale=1,
text = "Apoint", textsize = 2, linewidth = 5)
load("data/two_um_scan.rda")
View(two_um_scan)
512/2000
elmat <- two_um_scan$maps$Height_Sensor_matrix
threed<- elmat %>%
sphere_shade(texture = "desert") %>%
add_shadow(ray_shade(elmat,zscale=1,maxsearch = 100),0.7) %>%
add_shadow(ambient_shade(elmat, zscale = 1),0.7) %>%
plot_3d(elmat, zscale = 1)
library(rayshader)
threed<- elmat %>%
sphere_shade(texture = "desert") %>%
add_shadow(ray_shade(elmat,zscale=1,maxsearch = 100),0.7) %>%
add_shadow(ambient_shade(elmat, zscale = 1),0.7) %>%
plot_3d(elmat, zscale = 1)
2000/512
threed<- elmat %>%
sphere_shade(texture = "desert") %>%
add_shadow(ray_shade(elmat,zscale=3.9,maxsearch = 100),0.7) %>%
add_shadow(ambient_shade(elmat, zscale = 3.9),0.7) %>%
plot_3d(elmat, zscale = 3.9)
29*4
2000/116
116*20
40*4
160*12
40000/1920
multiples <- c()
while(val < 1000) {
for(i in 1:500) {
val <- i * 3
multiples <- val
}
}
while((i*3) < 1000) {
for(i in 1:500) {
multiples <- i * 3
}
}
multiples <- 0
for(i in range(1000)) {
if(i/3 == 0 | i/5 == 0)
multiples <- multiples + i
}
for(i in range(1000)) {
if((i/3) == 0)
multiples <- multiples + i
}
multiples <- 0
for(i in range(1000)) {
if((i/3) == 0)
print(i)
}
for(i in range(1000)) {
if((i/3) == 0){
print(i)
}
}
for(i in range(1000)) {
if(i/3 == 0){
print(i)
}
}
for(i in range(1000)) {
if(i/3 == 0){
i
}
}
for(i in range(1000)) {
if(i%%3 == 0){
print(i)
}
}
limit <- 999
limit_3 <- 999/3
limit_5 <- 999/5
limit_15 <- 999/15
sum_3 <- 3*limit_3*(limit_3 + 1)/2
sum_5 <- 5*limit_5*(limit_5 + 1)/2
sum_15 <- 15*limit_15*(limit_15 + 1)/2
sum_tot <- sum_3 + sum_5 + sum_15
sum_tot <- sum_3 + sum_5 - sum_15
as.integer(sum_15)
as.integer(sum_tot)
limit_3 <- 999/3
limit_5 <- 999/5
limit_15 <- 999/15
sum_3 <- 3*(limit_3/2)*(limit_3 + 1)
sum_5 <- 5*(limit_5/2)*(limit_5 + 1)
sum_15 <- 15*(limit_15/2)*(limit_15 + 1)
sum_tot <- sum_3 + sum_5 - sum_15
as.integer(sum_tot)
limit_3 <- 999/3
limit_5 <- 999/5
limit_15 <- 999/15
sum_3 <- 3*((limit_3 + 1)*(limit_3/2))
sum_5 <- 5*((limit_5 + 1)*(limit_5/2))
sum_15 <- 15*((limit_15 + 1)*(limit_15/2))
sum_tot <- sum_3 + sum_5 - sum_15
as.integer(sum_tot)
height_matrix <- half_um_scan$maps$Height_Sensor_matrix
height_scaled <- height_matrix + abs(min(height_matrix))
height_scaled <- range01(height_matrix)
height_scaled <- EBImage::normalize(height_matrix, 1)
height_img <- Image(height_scaled)
height_rot <- rotate(x = height_img, 90)
display(height_rot, method = "raster")
library(tidyverse)
library(EBImage)
library(viridis)
library(png)
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
height_matrix <- two_um_scan$maps$Height_Sensor_matrix
height_scaled <- height_matrix + abs(min(height_matrix))
height_scaled <- range01(height_matrix)
height_scaled <- EBImage::normalize(height_matrix, 1)
height_img <- Image(height_scaled)
height_rot <- rotate(x = height_img, 90)
display(height_rot, method = "raster")
grey_pal1 <- grey.colors(256, start = 0, end = 1, gamma = 1)
height_grey1 <- colormap(height_rot, grey_pal1)
test_img <- display(height_grey1, method = "raster")
afm_img <- function(data = NULL, matrix = NULL, color = NULL, normalized = TRUE) {
if(is.null(data)) {stop("data argument must be specified")}
if(class(data) != "afm_scan") {stop("class of data must be 'afm_scan'")}
if(!(matrix %in% names(data[["maps"]]))) {stop("matrix not found in data, check your spelling")}
nanoscope_colors <- c("#000000", "#000000", "#0A0000", "#140000", "#1E0000", "#280000", "#320000", "#3C0000", "#460000", "#500000", "#5A0400", "#641500", "#6E2300", "#783400", "#824300", "#8C5100", "#966100", "#A07102", "#AA801B", "#B49037", "#BE9F52", "#C8AD6C", "#D2BD87", "#DCCCA3", "#E6DCBF", "#F0ECDB", "#FAFAF5", "#FFFFFF", "#FFFFFF")
nanoscope_pal <- colorRampPalette(nanoscope_colors)
pal <- switch(
color,
"nanoscope" = nanoscope_pal(256),
"distinct_rainbow" = rainbow(10),
"smooth_rainbow" = rainbow(256),
"viridis" = viridis::viridis(256),
"magma" = viridis::magma(256),
"plasma" = viridis::plasma(256),
"inferno" = viridis::inferno(256)
)
my_dat <- data[["maps"]][[matrix]]
if(normalized == TRUE) {
normalized <- EBImage::normalize(my_dat, 1)
img <- EBImage::Image(normalized)
} else {
img <- EBImage::Image(my_dat)
}
img_rot <- EBImage::rotate(img, -90)
if(is.null(color)) {
img_rot
} else {
img_col <- EBImage::colormap(img_rot, pal)
}
}
afm_img(two_um_scan, matrix = "Height_Sensor_matrix")
afm_img <- function(data = NULL, matrix = NULL, color = NULL, normalized = TRUE) {
if(is.null(data)) {stop("data argument must be specified")}
if(class(data) != "afm_scan") {stop("class of data must be 'afm_scan'")}
if(!(matrix %in% names(data[["maps"]]))) {stop("matrix not found in data, check your spelling")}
nanoscope_colors <- c("#000000", "#000000", "#0A0000", "#140000", "#1E0000", "#280000", "#320000", "#3C0000", "#460000", "#500000", "#5A0400", "#641500", "#6E2300", "#783400", "#824300", "#8C5100", "#966100", "#A07102", "#AA801B", "#B49037", "#BE9F52", "#C8AD6C", "#D2BD87", "#DCCCA3", "#E6DCBF", "#F0ECDB", "#FAFAF5", "#FFFFFF", "#FFFFFF")
nanoscope_pal <- colorRampPalette(nanoscope_colors)
pal <- switch(
color,
NULL = NULL,
"nanoscope" = nanoscope_pal(256),
"distinct_rainbow" = rainbow(10),
"smooth_rainbow" = rainbow(256),
"viridis" = viridis::viridis(256),
"magma" = viridis::magma(256),
"plasma" = viridis::plasma(256),
"inferno" = viridis::inferno(256)
)
my_dat <- data[["maps"]][[matrix]]
if(normalized == TRUE) {
normalized <- EBImage::normalize(my_dat, 1)
img <- EBImage::Image(normalized)
} else {
img <- EBImage::Image(my_dat)
}
img_rot <- EBImage::rotate(img, -90)
if(is.null(color)) {
img_rot
} else {
img_col <- EBImage::colormap(img_rot, pal)
}
}
afm_img(two_um_scan, matrix = "Height_Sensor_matrix")
afm_img <- function(data = NULL, matrix = NULL, color = NULL, normalized = TRUE) {
if(is.null(data)) {stop("data argument must be specified")}
if(class(data) != "afm_scan") {stop("class of data must be 'afm_scan'")}
if(!(matrix %in% names(data[["maps"]]))) {stop("matrix not found in data, check your spelling")}
nanoscope_colors <- c("#000000", "#000000", "#0A0000", "#140000", "#1E0000", "#280000", "#320000", "#3C0000", "#460000", "#500000", "#5A0400", "#641500", "#6E2300", "#783400", "#824300", "#8C5100", "#966100", "#A07102", "#AA801B", "#B49037", "#BE9F52", "#C8AD6C", "#D2BD87", "#DCCCA3", "#E6DCBF", "#F0ECDB", "#FAFAF5", "#FFFFFF", "#FFFFFF")
nanoscope_pal <- colorRampPalette(nanoscope_colors)
pal <- switch(
color,
"nanoscope" = nanoscope_pal(256),
"distinct_rainbow" = rainbow(10),
"smooth_rainbow" = rainbow(256),
"viridis" = viridis::viridis(256),
"magma" = viridis::magma(256),
"plasma" = viridis::plasma(256),
"inferno" = viridis::inferno(256),
NULL
)
my_dat <- data[["maps"]][[matrix]]
if(normalized == TRUE) {
normalized <- EBImage::normalize(my_dat, 1)
img <- EBImage::Image(normalized)
} else {
img <- EBImage::Image(my_dat)
}
img_rot <- EBImage::rotate(img, -90)
if(is.null(color)) {
img_rot
} else {
img_col <- EBImage::colormap(img_rot, pal)
}
}
afm_img(two_um_scan, matrix = "Height_Sensor_matrix")
afm_img <- function(data = NULL, matrix = NULL, color = "grey", normalized = TRUE) {
if(is.null(data)) {stop("data argument must be specified")}
if(class(data) != "afm_scan") {stop("class of data must be 'afm_scan'")}
if(!(matrix %in% names(data[["maps"]]))) {stop("matrix not found in data, check your spelling")}
nanoscope_colors <- c("#000000", "#000000", "#0A0000", "#140000", "#1E0000", "#280000", "#320000", "#3C0000", "#460000", "#500000", "#5A0400", "#641500", "#6E2300", "#783400", "#824300", "#8C5100", "#966100", "#A07102", "#AA801B", "#B49037", "#BE9F52", "#C8AD6C", "#D2BD87", "#DCCCA3", "#E6DCBF", "#F0ECDB", "#FAFAF5", "#FFFFFF", "#FFFFFF")
nanoscope_pal <- colorRampPalette(nanoscope_colors)
pal <- switch(
color,
"nanoscope" = nanoscope_pal(256),
"distinct_rainbow" = rainbow(10),
"smooth_rainbow" = rainbow(256),
"viridis" = viridis::viridis(256),
"magma" = viridis::magma(256),
"plasma" = viridis::plasma(256),
"inferno" = viridis::inferno(256),
NULL
)
my_dat <- data[["maps"]][[matrix]]
if(normalized == TRUE) {
normalized <- EBImage::normalize(my_dat, 1)
img <- EBImage::Image(normalized)
} else {
img <- EBImage::Image(my_dat)
}
img_rot <- EBImage::rotate(img, -90)
if(is.null(color)) {
img_rot
} else {
img_col <- EBImage::colormap(img_rot, pal)
}
}
afm_img(two_um_scan, matrix = "Height_Sensor_matrix")
afm_img(two_um_scan, matrix = "Height_Sensor_matrix")
afm_img <- function(data = NULL, matrix = NULL, color = "none", normalized = TRUE) {
if(is.null(data)) {stop("data argument must be specified")}
if(class(data) != "afm_scan") {stop("class of data must be 'afm_scan'")}
if(!(matrix %in% names(data[["maps"]]))) {stop("matrix not found in data, check your spelling")}
nanoscope_colors <- c("#000000", "#000000", "#0A0000", "#140000", "#1E0000", "#280000", "#320000", "#3C0000", "#460000", "#500000", "#5A0400", "#641500", "#6E2300", "#783400", "#824300", "#8C5100", "#966100", "#A07102", "#AA801B", "#B49037", "#BE9F52", "#C8AD6C", "#D2BD87", "#DCCCA3", "#E6DCBF", "#F0ECDB", "#FAFAF5", "#FFFFFF", "#FFFFFF")
nanoscope_pal <- colorRampPalette(nanoscope_colors)
pal <- switch(
color,
"nanoscope" = nanoscope_pal(256),
"distinct_rainbow" = rainbow(10),
"smooth_rainbow" = rainbow(256),
"viridis" = viridis::viridis(256),
"magma" = viridis::magma(256),
"plasma" = viridis::plasma(256),
"inferno" = viridis::inferno(256),
"none" = NULL
)
my_dat <- data[["maps"]][[matrix]]
if(normalized == TRUE) {
normalized <- EBImage::normalize(my_dat, 1)
img <- EBImage::Image(normalized)
} else {
img <- EBImage::Image(my_dat)
}
img_rot <- EBImage::rotate(img, -90)
if(is.null(color)) {
img_rot
} else {
img_col <- EBImage::colormap(img_rot, pal)
}
}
afm_img(two_um_scan, matrix = "Height_Sensor_matrix")
afm_img <- function(data = NULL, matrix = NULL, color = "none", normalized = TRUE) {
if(is.null(data)) {stop("data argument must be specified")}
if(class(data) != "afm_scan") {stop("class of data must be 'afm_scan'")}
if(!(matrix %in% names(data[["maps"]]))) {stop("matrix not found in data, check your spelling")}
nanoscope_colors <- c("#000000", "#000000", "#0A0000", "#140000", "#1E0000", "#280000", "#320000", "#3C0000", "#460000", "#500000", "#5A0400", "#641500", "#6E2300", "#783400", "#824300", "#8C5100", "#966100", "#A07102", "#AA801B", "#B49037", "#BE9F52", "#C8AD6C", "#D2BD87", "#DCCCA3", "#E6DCBF", "#F0ECDB", "#FAFAF5", "#FFFFFF", "#FFFFFF")
nanoscope_pal <- colorRampPalette(nanoscope_colors)
pal <- switch(
color,
"nanoscope" = nanoscope_pal(256),
"distinct_rainbow" = rainbow(10),
"smooth_rainbow" = rainbow(256),
"viridis" = viridis::viridis(256),
"magma" = viridis::magma(256),
"plasma" = viridis::plasma(256),
"inferno" = viridis::inferno(256),
"none" = grey.colors(10)
)
my_dat <- data[["maps"]][[matrix]]
if(normalized == TRUE) {
normalized <- EBImage::normalize(my_dat, 1)
img <- EBImage::Image(normalized)
} else {
img <- EBImage::Image(my_dat)
}
img_rot <- EBImage::rotate(img, -90)
if(color == "none") {
img_rot
} else {
img_col <- EBImage::colormap(img_rot, pal)
}
}
afm_img(two_um_scan, matrix = "Height_Sensor_matrix")
afm_img(two_um_scan, matrix = "Height_Sensor_matrix") %>%
display(method = "raster")
afm_img(two_um_scan, matrix = "Height_Sensor_matrix") %>%
display(method = "raster")
afm_img(two_um_scan, matrix = "Height_Sensor_matrix", color = "nanoscope") %>%
display(method = "raster")
document()
load("data/two_um_scan.rda")
document()
document()
document()
document()
document()
?add_shadow
